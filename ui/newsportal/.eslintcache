[{"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/index.js":"1","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/App.js":"2","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/reportWebVitals.js":"3","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/tasklist/TaskListComponent.jsx":"4","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/login/LoginComponent.jsx":"5","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/sidebar/SidebarComponent.jsx":"6","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/compose/ComposeComponent.jsx":"7"},{"size":501,"mtime":1609341879708,"results":"8","hashOfConfig":"9"},{"size":746,"mtime":1609352965020,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1609337129739,"results":"11","hashOfConfig":"9"},{"size":13780,"mtime":1609584798371,"results":"12","hashOfConfig":"9"},{"size":3257,"mtime":1609581836751,"results":"13","hashOfConfig":"9"},{"size":263,"mtime":1609349511569,"results":"14","hashOfConfig":"9"},{"size":2825,"mtime":1609582111095,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"dypp9o",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/index.js",[],["34","35"],"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/App.js",[],"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/reportWebVitals.js",[],"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/tasklist/TaskListComponent.jsx",["36","37"],"import React, { useEffect, useState } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { Button } from 'react-bootstrap';\n\n// function createData(articleName, composer, approvedBy, approvalDate, lastUpdatedDate, action) {\n//   return { articleName, composer, approvedBy, approvalDate, lastUpdatedDate, action };\n// }\n\nvar rows = [\n  // createData('Delhi: 1,336 challans issued on New Year\\'s Eve', 'composer', 'editor1', 'Fri Jan 01 2021 19:20:30 GMT+0530', 'Fri Jan 01 2021 19:20:30 GMT+0530', 'Action'),\n  // createData('Why 2021 could be turning point for tackling climate change', 'composer', 'editor1', 'Thur 31 2020 18:12:10 GMT+0530', 'Thur 31 2020 18:12:10 GMT+0530', 'Action')\n];\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'articleName', numeric: false, disablePadding: true, label: 'Article Name' },\n  { id: 'composer', numeric: false, disablePadding: false, label: 'Composer' },\n  { id: 'approvedBy', numeric: false, disablePadding: false, label: 'Approved By' },\n  { id: 'approvalDate', numeric: false, disablePadding: false, label: 'Approved Date' },\n  { id: 'lastUpdatedDate', numeric: false, disablePadding: false, label: 'Last Updated Date' },\n  { id: 'action', numeric: false, disablePadding: false, label: 'Action' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Articles\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function TaskListComponent() {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const [show, setShow] = useState(false);\n  const [articleName, setArticleName] = useState(\"\");\n  const [newArticleText, setNewArticleText] = useState(\"\")\n\n  const onArticleTextChange = (e) => {\n    setNewArticleText(e.target.value)\n  }\n\n  const [fetchedRows, setRows] = useState([]); \n  const [emptyRows, setEmptyRows] = useState(0)\n\n  useEffect(() => {\n    fetch('http://localhost:8090/articles', {\n      method: 'POST', \n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"editor\": localStorage.getItem('role')\n      })\n    }).then(response => response.json())\n    .then(\n      result => {\n        console.log(result)\n        setRows(result)\n        rows = fetchedRows\n        setEmptyRows(rowsPerPage - Math.min(rowsPerPage, result.length - page * rowsPerPage))\n      }\n    )\n    return () => {}\n  },[])\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    const handleSave = (id, articleText) => {\n      fetch('http://localhost:8090/article/update', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"articleText\": articleText,\n            \"id\": id\n        })\n    }).then(\n        res => console.log(res)\n    )\n    setShow(false);\n  }\n  \n    const handleSubmit = (e, row, approved) => {\n      // handleSave();\n      fetch('http://localhost:8090/complete', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"editor\": localStorage.getItem(\"role\"),\n            \"processInstanceId\": row.processInstanceId,\n            \"approved\": approved\n        })\n    }).then(\n        res => console.log(res)\n    )\n    setShow(false);\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = fetchedRows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, articleName) => {\n    setArticleName(articleName)\n    handleShow()\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size='medium'\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={fetchedRows.length}\n            />\n            <TableBody>\n              {stableSort(fetchedRows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.name);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      // onClick={(event) => handleClick(event, row.name)}\n                      // role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      {/* <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell> */}\n                      <TableCell>{row.articleName}</TableCell>\n                      <TableCell>{row.composer}</TableCell>\n                      <TableCell>{row.approvedBy}</TableCell>\n                      <TableCell>{row.approvalDate}</TableCell>\n                      <TableCell>{row.lastUpdatedDate}</TableCell>\n                      <TableCell><Button onClick={(event) => handleClick(event, row.articleName)}>Edit</Button></TableCell>\n                      \n                      <Modal show={show} onHide={handleClose}>\n                        <Modal.Header closeButton>\n                        <Modal.Title>{articleName!==\"\"? articleName: \"Article Title\"}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <textarea onChange={(e)=>onArticleTextChange(e)}>{row.articleText}</textarea> \n                        </Modal.Body>\n                        <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={()=>handleSave(row._id,newArticleText)}>\n                            Save Changes\n                        </Button>\n                        </Modal.Footer>\n                      </Modal>\n                      \n                      <TableCell><Button className=\"btn btn-success\" onClick={(event) => handleSubmit(event, row.processInstanceId, \"approved\")}>Approve</Button></TableCell>\n                      {localStorage.getItem('role')===\"editor1\" ? <></> : <TableCell><Button className=\"btn btn-danger\" onClick={(event) => handleSubmit(event, row.processInstanceId, \"rejected\")}>Reject</Button></TableCell>}\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10]}\n          component=\"div\"\n          count={fetchedRows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n\n    </div>\n  );\n}\n","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/login/LoginComponent.jsx",["38","39"],"import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Button } from 'react-bootstrap'\nimport './LoginComponent.scss'\n\nconst LoginComponent = (props) => {\n\n    localStorage.setItem(\"camunda-roles\",\n        JSON.stringify({\n            roles: {\n                composer : false,\n                editor1: false,\n                editor2: false,\n                editor3: false\n            },\n            users: {\n                composer: \"composerUser\",\n                editor1: \"editor1User\",\n                editor2: \"editor2User\",\n                editor3: \"editor3User\"\n            }\n        })\n    )\n\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    const onUsernameChange = (e) => { setUsername(e.target.value) }\n    const onPasswordChange = (e) => { setPassword(e.target.value) }\n\n    const login = () => {\n        let camunda_roles = localStorage.getItem(\"camunda-roles\")\n        camunda_roles = JSON.parse(camunda_roles)\n        for (const [key, value] of Object.entries(camunda_roles.users)) {\n            if (value === username){\n                console.log(\"logged in as \",key);\n                localStorage.setItem(\"role\",key)\n                localStorage.setItem(\"username\",username)\n            }\n        }\n        if (localStorage.getItem(\"role\") === \"composer\"){\n            props.history.push({\n                pathname: '/compose',\n                role: \"composer\"\n            })\n        }\n        if (localStorage.getItem(\"role\") === \"editor1\"){\n            props.history.push({\n                pathname: '/tasklist',\n                role: \"editor1\"\n            })\n        }\n        if (localStorage.getItem(\"role\") === \"editor2\"){\n            props.history.push({\n                pathname: '/tasklist',\n                role: \"editor2\"\n            })\n        }\n        if (localStorage.getItem(\"role\") === \"editor3\"){\n            props.history.push({\n                pathname: '/tasklist',\n                role: \"editor3\"\n            })\n        }\n        \n    }\n\n    const logout = () => {\n        localStorage.setItem(\"camunda-roles\",\n            JSON.stringify({\n                roles: {\n                    composer : false,\n                    editor1: false,\n                    editor2: false,\n                    editor3: false\n                },\n                users: {\n                    composer: \"composerUser\",\n                    editor1: \"editor1User\",\n                    editor2: \"editor2User\",\n                    editor3: \"editor3User\"\n                }\n            })\n        )\n        localStorage.removeItem(\"role\");\n        localStorage.removeItem(\"username\")\n    }\n\n    return (  \n        <div className=\"content\">\n            <div className=\"login\">\n                <input type=\"text\" onChange={(e)=>onUsernameChange(e)} placeholder=\"Username\"/>\n                <input type=\"password\" onChange={(e)=>onPasswordChange(e)} placeholder=\"Password\"/>\n                <Button variant=\"primary\" onClick={(e)=>login(e)} type=\"submit\">Login</Button>\n                {/* <Button variant=\"primary\" onClick={(e)=>logout(e)} type=\"submit\">Logout</Button> */}\n            </div>\n        </div>\n    );\n}\n \nexport default LoginComponent;","/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/sidebar/SidebarComponent.jsx",[],["40","41"],"/Users/ksreenivasareddy/Downloads/camunda-on-pcf/nodejs-sample/ui/newsportal/src/components/compose/ComposeComponent.jsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":239,"column":9,"nodeType":"48","messageId":"49","endLine":239,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":244,"column":5,"nodeType":"52","endLine":244,"endColumn":7,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"54","line":26,"column":12,"nodeType":"48","messageId":"49","endLine":26,"endColumn":20},{"ruleId":"46","severity":1,"message":"55","line":68,"column":11,"nodeType":"48","messageId":"49","endLine":68,"endColumn":17},{"ruleId":"42","replacedBy":"56"},{"ruleId":"44","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'rows' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchedRows', 'page', and 'rowsPerPage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setEmptyRows' needs the current value of 'rowsPerPage'.","ArrayExpression",["60"],"'password' is assigned a value but never used.","'logout' is assigned a value but never used.",["58"],["59"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [fetchedRows, page, rowsPerPage]",{"range":"63","text":"64"},[7799,7801],"[fetchedRows, page, rowsPerPage]"]